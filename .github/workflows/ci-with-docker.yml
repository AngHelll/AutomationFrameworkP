# 🐳 CI/CD Workflow - Docker Approach (FOR PRACTICE & LEARNING)
#
# 🎯 What this does:
#    - Builds Docker image with all dependencies
#    - Runs tests inside containers (isolated!)
#    - Great for learning Docker in CI/CD
#
# ⏱️  Execution time: ~2-3 minutes (with cache)
# 💰 Cost: HIGHER (longer build time)
# 🎓 Recommended for: Learning, production-like testing
#
# 📊 When it runs:
#    - Every push to main branch
#    - Every pull request to main branch
#    - Manual trigger (workflow_dispatch)
#
# 💡 COMPARISON:
#    This runs IN PARALLEL with ci.yml
#    Compare execution times and results!

name: CI with Docker - Practice

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # 🎮 Manual trigger - try it yourself!
  # Go to: Actions → CI with Docker → Run workflow
  workflow_dispatch:

jobs:
  # ════════════════════════════════════════════════════════
  # 🐳 JOB 1: Test with Docker (Container-based)
  # ════════════════════════════════════════════════════════
  test-with-docker:
    runs-on: ubuntu-latest
    
    steps:
      # 📥 STEP 1: Get the code
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        # Downloads your code to build Docker image

      # 🏗️  STEP 2: Setup Docker Buildx
      # Advanced Docker builder with caching support
      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # What is Buildx?
        # - Advanced Docker builder
        # - Better caching (faster builds)
        # - Multi-platform support
        # - Required for modern Docker features

      # 🐳 STEP 3: Build Docker Image
      # Creates container image with your framework
      - name: 🐳 Build Docker Image
        run: |
          docker build -t automation-framework:${{ github.sha }} .
          docker tag automation-framework:${{ github.sha }} automation-framework:latest
        # Command breakdown:
        # 1. docker build              → Create image from Dockerfile
        # 2. -t automation-framework   → Tag/name the image
        # 3. :${{ github.sha }}        → Version tag (unique commit hash)
        # 4. docker tag ... :latest    → Also tag as 'latest'
        #
        # 🔍 What's in the image:
        # - Python 3.11
        # - Google Chrome (for Selenium)
        # - All pip packages (pytest, selenium, behave, etc.)
        # - Your framework code
        # - All dependencies ready to go!
        #
        # ⏱️  Build time:
        # - First build: ~2 minutes (installs everything)
        # - Cached build: ~30 seconds (reuses layers)

      # 🧪 STEP 4: Run Pytest Tests in Container
      # Execute tests inside Docker container
      - name: 🧪 Run Pytest Tests in Docker
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/reports:/app/reports \
            -v ${{ github.workspace }}/logs:/app/logs \
            -v ${{ github.workspace }}/screenshots:/app/screenshots \
            automation-framework:latest \
            pytest -n auto -v --html=reports/test_report.html --self-contained-html
        # Command breakdown:
        # - docker run          → Start container from image
        # - --rm                → Remove container after done (cleanup)
        # - -v ... /reports     → Mount reports dir (get results out!)
        # - -v ... /logs        → Mount logs dir (get logs out!)
        # - -v ... /screenshots → Mount screenshots dir (get images out!)
        # - automation-framework:latest → Use this image
        # - pytest -n auto -v   → Run tests in parallel, verbose
        #
        # 🎯 Why volumes (-v)?
        # Without volumes, results stay inside container (lost!)
        # With volumes, results copied to GitHub workspace (saved!)
        #
        # 🔒 Container isolation:
        # - Tests run in clean environment
        # - No interference from host
        # - Same as production if you deploy with Docker

      # 🎭 STEP 5: Run BDD Tests in Container
      # Execute Behave tests inside Docker container
      - name: 🎭 Run BDD Tests in Docker
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/reports:/app/reports \
            automation-framework:latest \
            behave -v
        # Same idea as Pytest step, but runs BDD scenarios
        # Uses Gherkin syntax from features/ directory

      # 📊 STEP 6: Save All Reports
      # Upload everything for download
      - name: 📊 Upload Test Reports
        if: always()  # 💡 Run even if tests fail!
        uses: actions/upload-artifact@v4
        with:
          name: docker-test-reports
          path: |
            reports/
            logs/
            screenshots/
          retention-days: 7
        # What gets saved:
        # - HTML test reports
        # - Execution logs
        # - Failure screenshots
        # 
        # 💡 'if: always()' means:
        #    Upload reports even when tests fail
        #    Super useful for debugging!

      # 📝 STEP 7: Display Summary
      # Show results in GitHub Actions UI
      - name: 📝 Display Test Summary
        if: always()
        run: |
          echo "## 🐳 Docker Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Tests completed in Docker container" >> $GITHUB_STEP_SUMMARY
          echo "- Image: automation-framework:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Runner: ubuntu-latest" >> $GITHUB_STEP_SUMMARY
        # Adds nice summary to GitHub Actions UI
        # Visible at bottom of workflow run page

  # ════════════════════════════════════════════════════════
  # ⚡ JOB 2: Test WITHOUT Docker (for comparison)
  # ════════════════════════════════════════════════════════
  test-without-docker:
    runs-on: ubuntu-latest
    
    steps:
      # 📥 Get code
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # 🐍 Setup Python directly (no Docker)
      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'  # 🚀 Cache pip packages for speed!
        # 'cache: pip' means:
        # - First run: Install all packages (~20s)
        # - Next runs: Use cached packages (~5s)
        # 💰 Saves time and compute!

      # 📦 Install packages directly (no Docker)
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        # Installs directly on GitHub runner
        # Faster than Docker build!

      # 🧪 Run Pytest directly (no container)
      - name: 🧪 Run Pytest Tests Directly
        run: pytest -n auto -v --html=reports/test_report.html --self-contained-html
        # Runs on runner, not in container
        # Results already in workspace (no volumes needed)

      # 🎭 Run Behave directly (no container)
      - name: 🎭 Run BDD Tests Directly
        run: behave -v
        # BDD tests on runner, not in container

      # 📊 Save reports
      - name: 📊 Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: direct-test-reports
          path: reports/
          retention-days: 7

      # 📝 Summary for direct approach
      - name: 📝 Display Test Summary
        if: always()
        run: |
          echo "## 💻 Direct Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Tests completed directly on runner" >> $GITHUB_STEP_SUMMARY
          echo "- Python: 3.11" >> $GITHUB_STEP_SUMMARY
          echo "- Runner: ubuntu-latest" >> $GITHUB_STEP_SUMMARY

  # ════════════════════════════════════════════════════════
  # 📊 JOB 3: Compare Performance (runs after both complete)
  # ════════════════════════════════════════════════════════
  compare-performance:
    needs: [test-with-docker, test-without-docker]  # ⏳ Wait for both
    runs-on: ubuntu-latest
    if: always()  # 💡 Run even if tests failed
    
    steps:
      # 📊 Display comparison summary
      - name: 📊 Performance Summary
        run: |
          echo "## ⚡ Performance Comparison" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Docker Approach" >> $GITHUB_STEP_SUMMARY
          echo "- Build time: ~2-3 minutes (first time)" >> $GITHUB_STEP_SUMMARY
          echo "- Build time: ~30 seconds (cached)" >> $GITHUB_STEP_SUMMARY
          echo "- Test execution: ~30 seconds" >> $GITHUB_STEP_SUMMARY
          echo "- Total: ~2-3 minutes" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Pros: Isolated, consistent, production-like" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️  Cons: Slower, more complex" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚡ Direct Approach" >> $GITHUB_STEP_SUMMARY
          echo "- Setup time: ~30 seconds (cached)" >> $GITHUB_STEP_SUMMARY
          echo "- Test execution: ~30 seconds" >> $GITHUB_STEP_SUMMARY
          echo "- Total: ~1 minute" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Pros: Fast, simple, cheap" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️  Cons: Less isolation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Recommendation" >> $GITHUB_STEP_SUMMARY
          echo "- Daily dev: Use **Direct** approach ⚡" >> $GITHUB_STEP_SUMMARY
          echo "- Production parity: Use **Docker** approach 🐳" >> $GITHUB_STEP_SUMMARY
          echo "- Learning: Compare both! 🎓" >> $GITHUB_STEP_SUMMARY

# ═══════════════════════════════════════════════════════════
# 🎓 LEARNING NOTES:
# ═══════════════════════════════════════════════════════════
#
# 🐳 DOCKER APPROACH:
# ┌────────────────────────────────────────────────────────┐
# │ 1. Build Image    → 2 min  (installs everything)      │
# │ 2. Run Pytest     → 30 sec (in container)             │
# │ 3. Run Behave     → 20 sec (in container)             │
# │ 4. Upload Results → 5 sec  (save artifacts)           │
# │ ─────────────────────────────────────────────────────  │
# │ TOTAL:            ~2.5 min                             │
# └────────────────────────────────────────────────────────┘
#
# ⚡ DIRECT APPROACH:
# ┌────────────────────────────────────────────────────────┐
# │ 1. Setup Python   → 10 sec (cached)                   │
# │ 2. Install Deps   → 20 sec (cached)                   │
# │ 3. Run Pytest     → 30 sec (on runner)                │
# │ 4. Run Behave     → 20 sec (on runner)                │
# │ 5. Upload Results → 5 sec  (save artifacts)           │
# │ ─────────────────────────────────────────────────────  │
# │ TOTAL:            ~1.5 min                             │
# └────────────────────────────────────────────────────────┘
#
# 💡 KEY DIFFERENCES:
# ═══════════════════════════════════════════════════════════
#
# Docker:
# ✅ Isolated environment (clean slate)
# ✅ Same as production (if you deploy with Docker)
# ✅ No version conflicts
# ❌ Slower (build image every time)
# ❌ More complex (containers, volumes)
#
# Direct:
# ✅ Faster (no image build)
# ✅ Simpler (standard Python workflow)
# ✅ Better caching (GitHub optimized)
# ❌ Less isolated (shares runner)
# ❌ May differ from production
#
# ═══════════════════════════════════════════════════════════
# 🎯 WHEN TO USE EACH:
# ═══════════════════════════════════════════════════════════
#
# Use Docker when:
# - 🚀 Production uses Docker
# - 👥 Large team needs consistency
# - 🎓 Learning Docker/containers
# - 🔒 Need strict isolation
#
# Use Direct when:
# - ⚡ Want fast feedback
# - 💰 Minimize cost
# - 🐛 Easy debugging needed
# - 👤 Small team/solo dev
#
# ═══════════════════════════════════════════════════════════
# 🐛 DEBUGGING TIPS:
# ═══════════════════════════════════════════════════════════
#
# If Docker tests fail:
# 1. Check "Build Docker Image" step logs
# 2. Look for package installation errors
# 3. Verify Dockerfile syntax
# 4. Test locally: docker build -t test .
#
# If Direct tests fail:
# 1. Check "Run Pytest Tests" step logs
# 2. Look for import errors
# 3. Verify requirements.txt
# 4. Test locally: pytest -v
#
# For both:
# - Download artifacts to see HTML reports
# - Check screenshots/ for visual errors
# - Review logs/ for detailed execution
#
# ═══════════════════════════════════════════════════════════
# 📚 RESOURCES:
# ═══════════════════════════════════════════════════════════
#
# - docs/DOCKER_GUIDE.md     → Complete Docker usage guide
# - docs/CI_COMPARISON.md    → Detailed comparison
# - Dockerfile               → See what's in the image
# - .dockerignore            → See what's excluded
#
# ═══════════════════════════════════════════════════════════
